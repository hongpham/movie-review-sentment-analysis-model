AWSTemplateFormatVersion: '2010-09-09'
Description: An example API Gateway calling Lambda function.
Parameters:
  apiName:
    Type: String
    Default: myDevAPI
  lambdaName:
    Type: String
    Default: myDevFunction

Resources:
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: basic post REST API
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref apiName

  apiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: Dev

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
      
            # Use SageMaker runtime to invoke our endpoint, sending the review 

            runtime = boto3.Session().client('sagemaker-runtime')
            response = runtime.invoke_endpoint(EndpointName = '**Sagemaker endpoint**',    
                                               ContentType = 'text/plain',                 
                                               Body = event['body'])                       

            result = response['Body'].read().decode('utf-8')

            return {
                'statusCode' : 200,
                'headers' : { 'Content-Type' : 'text/plain', 'Access-Control-Allow-Origin' : '*' },
                'body' : result
            }


      Description: Lambda function to inference with Sage Maker endpoint
      FunctionName: !Ref lambdaName
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.8

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/Dev/POST/

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaName}:*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaName}
      RetentionInDays: 90

Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/Dev

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn